Formal Question List

Heap property questions
Section 1: Is this a valid binary Heap: both tree and array only
maybe build tree or array based on other

Left Right Parent questions (or Array questions)
Section 0: 3questions on
Section 2: Eytzinger Method: Array and Tree 3questions
Seciton x: Eytzinger method: Only Array

Tree Questions: how the interface works
Tree and Array: add/bubbleup, remove/trickledown
Just Tree     :
Just Array    :




is this a valid binary heap (heap-ordered)
  tree
  and array

heapsort

Eytzinger
int left(int i) {
return 2*i + 1;
}
int right(int i) {
return 2*i + 2;
}
int parent(int i) {
return (i - 1)/2
}

tree stuff:
boolean add(T x) {
if (n + 1 > a.length) resize();
a[n++] = x;
bubbleUp(n-1);
return true;
}
void bubbleUp(int i) {
int p = parent(i);
while (i > 0 && compare(a[i], a[p]) < 0) {
swap(i,p);
i = p;
p = parent(i);
}
}

T remove() {
T x = a[0];
a[0] = a[--n];
trickleDown(0);
}
void trickleDown(int i) {
do {
int j = -1;
int r = right(i);
if (r < n && compare(a[r], a[i]) < 0) {
int l = left(i);
if (compare(a[l], a[r]) < 0) {
j = l;
} else {
j = r;
}
} else {
int l = left(i);
if (l < n && compare(a[l], a[i]) < 0) {
j = l;
}
}
if (j >= 0) swap(i, j);
i = j;
} while (i >= 0);
}


complete tree

Therefore, if the height of this tree is h, then it
has at least 2 h nodes. Stated another way
n ≥ 2 h .
Taking logarithms on both sides of this equation gives
h ≤ log n .
Therefore, both the add(x) and remove() operation run i




todo:
parameters
  minNumNodes
  maxNumNodes
  minValue
  maxValue
  showArray
  showTree

  *do we want duplicate values* -> yes

  disableUserInteraction (maybe)

questionTypes
questions

model
representation (draw stuff)

quesitons:
heapsort
